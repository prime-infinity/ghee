name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-test-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run integration tests
        run: npm run test:run -- --run src/__tests__/integration/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npx playwright test tests/e2e/performance.spec.ts --project=chromium
        env:
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: test-results/
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npx playwright test tests/e2e/accessibility.spec.ts --project=chromium
        env:
          CI: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: test-results/
          retention-days: 30

  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: npx playwright test tests/e2e/visualRegression.spec.ts --project=chromium
        env:
          CI: true

      - name: Upload visual diff results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-regression-diffs
          path: test-results/
          retention-days: 7

  mobile-tests:
    name: Mobile Device Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run mobile tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"
        env:
          CI: true

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        integration-tests,
        e2e-tests,
        performance-tests,
        accessibility-tests,
        visual-regression-tests,
        mobile-tests,
      ]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Accessibility Tests: ${{ needs.accessibility-tests.result }}"
          echo "Visual Regression Tests: ${{ needs.visual-regression-tests.result }}"
          echo "Mobile Tests: ${{ needs.mobile-tests.result }}"

          # Fail if any critical tests failed
          if [[ "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "Critical tests failed"
            exit 1
          fi

          # Warn if non-critical tests failed
          if [[ "${{ needs.performance-tests.result }}" == "failure" || 
                "${{ needs.accessibility-tests.result }}" == "failure" || 
                "${{ needs.visual-regression-tests.result }}" == "failure" ]]; then
            echo "Non-critical tests failed - review required"
          fi

      - name: Create test report
        if: always()
        run: |
          cat > test-summary.md << EOF
          # Test Summary Report

          ## Test Results
          - Unit Tests: ${{ needs.unit-tests.result }}
          - Integration Tests: ${{ needs.integration-tests.result }}
          - E2E Tests: ${{ needs.e2e-tests.result }}
          - Performance Tests: ${{ needs.performance-tests.result }}
          - Accessibility Tests: ${{ needs.accessibility-tests.result }}
          - Visual Regression Tests: ${{ needs.visual-regression-tests.result }}
          - Mobile Tests: ${{ needs.mobile-tests.result }}

          ## Requirements Coverage
          All requirements from the specification have been validated through:
          - Functional testing (Requirements 1-13)
          - Performance testing (Requirement 12)
          - Accessibility testing (Requirements 8-9)
          - Error handling testing (Requirement 13)
          - Pattern recognition testing (Requirements 2-7, 10-11)

          Generated on: $(date)
          EOF

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30
